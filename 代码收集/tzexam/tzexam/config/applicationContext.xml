<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:tx="http://www.springframework.org/schema/tx" 
		xmlns:aop="http://www.springframework.org/schema/aop"
		xmlns:context="http://www.springframework.org/schema/context" 
		xmlns:jee="http://www.springframework.org/schema/jee"
		xsi:schemaLocation="
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
			http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd" 
			default-autowire="byName" default-lazy-init="false">
	
	<!-- 打开spring的annotation的支持 -->
	<context:annotation-config />
	<!-- 设定spring去那些包中找annotation -->
	<context:component-scan base-package="com.tz.dao" />
	<context:component-scan base-package="com.tz.service" />
	
	<!-- 导入src目录下的jdbc.properties文件 -->
	<context:property-placeholder location="classpath:jdbc.properties"/>

	<!-- 配置c3p0连接池-->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${datasource.driverClassName}"></property>  
	    <property name="jdbcUrl" value="${datasource.url}"></property>  
	    <property name="user" value="${datasource.username}"></property>  
	    <property name="password" value="${datasource.password}"></property>  
	    <property name="acquireIncrement" value="${c3p0.acquireIncrement}"></property>  
	    <property name="initialPoolSize" value="${c3p0.initialPoolSize}"></property>  
	    <property name="maxIdleTime" value="${c3p0.maxIdleTime}"></property>  
	    <property name="maxPoolSize" value="${c3p0.maxPoolSize}"></property>  
	    <property name="minPoolSize" value="${c3p0.minPoolSize}"></property>  
	    <property name="idleConnectionTestPeriod" value="${c3p0.idleConnectionTestPeriod}"></property>  
	    <property name="maxStatements" value="${c3p0.maxStatements}"></property>  
	    <property name="numHelperThreads" value="${c3p0.numHelperThreads}"></property>  
	    <property name="testConnectionOnCheckout" value="${c3p0.testConnectionOnCheckout}"></property>  
	    <property name="preferredTestQuery" value="${c3p0.preferredTestQuery}"></property>  
	    <property name="acquireRetryDelay" value="1000"></property>  
	    <property name="acquireRetryAttempts" value="60"></property>  
	    <property name="breakAfterAcquireFailure" value="false"></property> 
	</bean>
	
	<!-- 创建spring的sessionfactory工厂 -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<!-- 注入数据源 -->
		<property name="dataSource" ref="dataSource"/>
		<!-- 设置spring去哪个包中查找相应的实体类 bean -->
		<property name="packagesToScan">
			<list>
				<value>com.tz.model</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>					
				<prop key="hibernate.format_sql">false</prop> 
				<prop key="hibernate.show_sql">true</prop>	
				<!-- 如果开启, Hibernate将在SQL中生成有助于调试的注释信息, 默认值为false. 取值 true | false -->
				<prop key="hibernate.use_sql_comments">true</prop>
				<!-- Fetch Size 是设定JDBC的Statement读取数据的时候每次从数据库中取出的记录条数。 -->	
				<prop key="hibernate.jdbc.fetch_size">50</prop>	
				<!-- Batch Size是设定对数据库进行批量删除，批量更新和批量插入的时候的批次大小 -->
				<prop key="hibernate.jdbc.batch_size">25</prop>	
				<!-- 允许使用外连接抓取.取值. true | false -->
				<prop key="hibernate.use_outer_join">true</prop>
				<!-- 外连接抓取树的最大深度,建议在0到3之间 -->
				<prop key="hibernate.max_fetch_depth">1</prop>
				<!-- 强制Hibernate按照被更新数据的主键，为SQL更新排序。这么做将减少在高并发系统中事务的死锁。 取值 true | false  -->
				<prop key="hibernate.order_updates">true</prop>
				<!-- 如果开启, Hibernate将收集有助于性能调节的统计数据.取值true|false -->
				<prop key="hibernate.generate_statistics">true</prop>
				<!-- create update delete create-drop-->
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="javax.persistence.validation.mode">none</prop>  
			</props>
		</property>
	</bean>
		
	<!-- 开启配置事务拦截器 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>

	<!-- 基本事务定义，使用transactionManager做事务管理，默认get*，find*方法的事务为read-only -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="find*" read-only="true"/>
			<tx:method name="get*" read-only="true"/>
			<tx:method name="add*" propagation="REQUIRED"/>
			<tx:method name="update*" propagation="REQUIRED"/>
			<tx:method name="delete*" propagation="REQUIRED"/>
			<tx:method name="save*" propagation="REQUIRED"/>
			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>		
	</tx:advice>
	
	<!-- 配置aop， spring是通过aop来进行事务管理的 -->
	<aop:config>
		<!-- 设置pointCut表示那些方法要加入事务处理 -->
		<!-- 以下的事务是声明在dao中的，但是通常都会在service来处理多个业务对象逻辑的关系，注入删除，更新等，此时如果在执行了一个步骤之后抛出异常
		 	  就会导致数据不完整，所以事务不应该在dao层处理，而应在service，这也是spring所提供的一个非常方便的工具，声明式事务-->
		<aop:pointcut id="interceptorPointCuts"
			expression="execution(* com.tz.service.*.*(..))"/> 
		<!-- 通过advisor来确定具体要加入事务控制的方法 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="interceptorPointCuts"/>
	</aop:config>
	
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
	 	<property name="basenames">
	 		<list>
	 			<value>resource</value>
	 		</list>
	 	</property>
	 	<property name="cacheSeconds" value="5"></property>
	 </bean>
</beans>